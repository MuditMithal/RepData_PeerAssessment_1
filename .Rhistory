myapp <- oauth_app("github", "aab60105329066f736cd", "8fbf108a1b6a4293aa6caab625b9913650c73b16")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("sqldf")
s1 <- seq(1, 10, by=2)
s1
s2 <- seq(1, 10, length=3)
s2
x <- c(1,3,8,25,100)
seq(along = x)
s1 <- seq(1, 10, by=2)
s1
s2 <- seq(1, 10, length=3)
s2
x <- c(1,3,8,25,100)
seq(along = x)
setwd("~/analysis/R_data/04_reproducible_research/RepData_PeerAssessment1")
install.packages("knitr")
setwd("~/analysis/R_data/04_reproducible_research/RepData_PeerAssessment1")
setwd("~/analysis/R_data/04_reproducible_research/RepData_PeerAssessment1")
df <- read.csv("./data_activity/activity.csv");
df <- na.omit(df);
tail(df);
df <- read.csv("data_activity/activity.csv");
df <- na.omit(df);
tail(df);
df <- read.csv("data_activity/activity.csv");
df <- read.csv("./data_activity/activity.csv");
df <- read.csv("./data_activity/activity.csv");
df <- na.omit(df);
tail(df, n=3);
df <- read.csv("./data_activity/activity.csv");
#df <- na.omit(df);
tail(df, n=3);
df <- read.csv("./data_activity/activity.csv", header=TRUE);
df <- na.omit(df);
tail(df, n=3);
aggregate(value ~ date, data = df, summary)
aggregate(steps ~ date, data = df, summary)
aggregate(steps ~ date, data = df, mean)
aggregate(steps ~ date, data = df, sum)
stepsDay <- header( c("date", "total_steps"))
head(stepsDay)
stepsDay <- aggregate(steps ~ date, data = df, sum)
head(stepsDay)
df <- read.csv("./data_activity/activity.csv", header=TRUE);
#df <- na.omit(df);
tail(df, n=3);
stepsDay <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
head(stepsDay)
head(stepsDay)
names(stepsDay) <- c("date", "total_steps")
head(stepsDay)
use(ggplot2)
ggplot2(stepsDay, aes(x=date) ) + geom_histogram()
```
import(ggplot2)
ggplot2(stepsDay, aes(x=date) ) + geom_histogram()
install.packages("ggplot2")
import(ggplot2)
ggplot2(stepsDay, aes(x=date) ) + geom_histogram()
ggplot2(data=stepsDay, aes(x=date) ) + geom_histogram()
library(ggplot2)
ggplot2(data=stepsDay, aes(x=date) ) + geom_histogram()
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot2(data=stepsDay, aes(x=date) ) + geom_histogram()
qplot(data=stepsDay, aes(x=date) ) + geom_histogram()
qplot(date, data=stepsDay, geom="histogram")
qplot(date, data=stepsDay, weight=total_steps, geom="histogram")
stepsDay_totals <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "total_steps")
library(ggplot2)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=0.1)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram")
ggplot(data=stepsDay_totals, aes(x=date, y=total_steps)) + geom_hist()
ggplot(data=stepsDay_totals, aes(x=date, y=total_steps)) + geom_histogram()
head(stepsDay_totals)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram"
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram")
library(ggplot2)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram")
ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", colour="black", fill="white")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=.5)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "steps_mean")
head(stepsDay_mean)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("date", "steps_mean")
head(stepsDay_mean)
stepsDay_totals <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "total_steps")
#head(stepsDay_totals)
library(ggplot2)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=.5)
#ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
summary(stepsDay_totals)
summary(stepsDay_totals$total_steps)
median(stepsDay_totals$total_steps, na.rm=TRUE)
summary(stepsDay_totals$total_steps, na.rm=TRUE)
median(stepsDay_totals$total_steps, na.rm=TRUE)
median(stepsDay_totals$total_steps)
mean(stepsDay_totals$total_steps)
mean(stepsDay_totals$total_steps, na.rm=TRUE)
df <- read.csv("./data_activity/activity.csv", header=TRUE);
#df <- na.omit(df);
tail(df, n=3);
df$date <- as.Date(df$date, "%Y-%m-%d")
stepsDay_totals <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "total_steps")
library(ggplot2)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=.5)
#ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
summary(stepsDay_totals$total_steps, na.rm=TRUE)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=2)
#ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1)
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram", ylab="Total_steps")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram", ylab="total steps")
qplot(date, data=stepsDay_totals, geom="histogram", binwidth=1, main="Histogram", ylab="total steps")
qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram", ylab="total steps")
g4<-ggplot(stepsDay_totals, aes(x=date)) + geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
g4<-ggplot(stepsDay_totals, aes(x=date)) + geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
ggplot(stepsDay_totals, aes(date)) + geom_histogram(fill=NA, color="black") + theme_bw()   #nicer looking
g4<-ggplot(stepsDay_totals, aes(x=date)) + geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
ggplot(stepsDay_totals, aes(x=date)) +
geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
hist(stepsDay_totals$total_steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day", col="red")
hist(stepsDay_totals$total_steps, col=1, main="Histogram of total number of steps per day",
xlab="Total number of steps in a day", col="red")
hist(stepsDay_totals$total_steps, col=1, main="Histogram of total number of steps per day", xlab="Total number of steps in a day", col="red")
hist(stepsDay_totals$total_steps, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
ggplot(stepsDay_totals, aes(x=date)) +
geom_histogram(aes(y = ..frequency..), color="black", fill=NA) + theme_bw()
ggplot(stepsDay_totals, aes(date)) + geom_histogram(fill=NA, color="black") + theme_bw()   #nicer looking
hist(stepsDay_totals$total_steps, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, breaks=10, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, breaks=12, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, breaks=12, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, breaks=16, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
hist(stepsDay_totals$total_steps, breaks=10, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
mean(stepsDay_totals$total_steps)
median(stepsDay_totals$total_steps)
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("date", "steps_mean")
plot(stepsInterval_mean, type = "l")
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("date", "steps mean")
plot(stepsInterval_mean, type = "l")
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("date", "steps mean")
plot(stepsInterval_mean, type = "l", main="The average number of steps")
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("5-min interval", "steps mean")
plot(stepsInterval_mean, type = "l", main="The average number of steps")
max_interval <- which.max(stepsInterval_mean$steps mean)
max_interval <- which.max(stepsInterval_mean$V2)
print max_interval
echo max_interval
max_interval <- which.max(stepsInterval_mean$V2)
print(max_interval)
max_interval
max_interval <- which.max(stepsInterval_mean$V2)
names(max_interval)
max_interval <- which.max(stepsInterval_mean$steps_mean)
names(max_interval)
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("interval", "steps_mean")
plot(stepsInterval_mean, type = "l", main="The average number of steps")
stepsInterval_mean$interval(max_interval)
which.max(stepsInterval_mean$steps_mean)
max_interva l<- which.max(stepsInterval_mean$steps_mean)
max_interval<- which.max(stepsInterval_mean$steps_mean)
stepsInterval_mean$interval(max_interval)
stepsInterval_mean$interval(which.max(stepsInterval_mean$steps_mean))
max_interval
stepsInterval_mean$interval[max_interval]
missing_values <- sum(is.na(df))
missing_values
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ day, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("interval", "steps_mean")
head(stepsDay_mean)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("interval", "steps_mean")
head(stepsDay_mean)
head(nas_vector)
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==FALSE){
date <- imputed_df$date[i]
imputed_df$steps[i] <- stepsDay_mean[date]
}
}
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("steps", "steps_mean")
head(stepsDay_mean)
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("date", "steps_mean")
head(stepsDay_mean)
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==FALSE){
date <- imputed_df$date[i]
imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==FALSE){
date <- imputed_df$date[i]
date
imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date
imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date
#imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
date
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
#imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
date
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
imputed_df$steps[i] <- stepsDay_mean$stepsDay_mean[date]
}
}
date
stepsDay_mean[date]
View(stepsDay_mean)
View(stepsDay_mean)
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=TRUE)
names(stepsDay_mean) <- c("date", "steps_mean")
head(stepsDay_mean)
imputed_df <- df
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
imputed_df$steps[i] <- stepsDay_mean$steps_mean[date]
}
}
date
stepsDay_mean$steps_mean[date]
tail(stepsDay_mean)
head(stepsDay_mean)
stepsDay_mean
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean)
names(stepsDay_mean) <- c("date", "steps_mean")
head(stepsDay_mean)
tail(stepsDay_mean)
stepsDay_mean
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=FALSE)
names(stepsDay_mean) <- c("date", "steps_mean")
head(stepsDay_mean)
tail(stepsDay_mean)
install.packages("lubridate")
imputed_df
library(lubridate)
for (i in 1:nrow(imputed_df)){
if (is.na(imputed_df$steps[i])){
current_day <- ymd(imputed_df$date[i])
previous_day <- current_day - days(1)
next_day <- current_day + days(1)
if ( current_day == ymd("2012-10-01")){
imputed_df$steps[i] <- stepsDay_mean$steps_mean[next_day]
}
else {
imputed_df$steps[i] <- stepsDay_mean$steps_mean[previous_day]
}
}
}
stepsDay_mean$steps_mean[date]
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
if (is.na(stepsDay_mean$steps_mean[date])){
imputed_df$steps[i] <- 0
}
else {
imputed_df$steps[i] <- stepsDay_mean$steps_mean[date]
}
}
}
imputed_df
head(imputed_df)
head(imputed_df)
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Load the activity data
```{r echo=TRUE}
setwd("~/analysis/R_data/04_reproducible_research/RepData_PeerAssessment1")
df <- read.csv("./data_activity/activity.csv", header=TRUE);
#df <- na.omit(df);
tail(df, n=3);
df$date <- as.Date(df$date, "%Y-%m-%d")
```
## What is mean total number of steps taken per day?
Calculate the total number of steps taken per day
Make a histogram of the total number of steps taken each day
The total number of steps taken per day was calculated by using aggregate function.
```{r echo=TRUE}
stepsDay_totals <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "total_steps")
#head(stepsDay_totals)
```
Histogram
```{r echo=TRUE}
hist(stepsDay_totals$total_steps, breaks=10, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
#library(ggplot2)
#qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram", ylab="total steps")
#density on y-axis
#4<-ggplot(stepsDay_totals, aes(x=date)) +
#  geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
#ggplot(stepsDay_totals, aes(date)) + geom_histogram(fill=NA, color="black") + theme_bw()   #nicer looking
#ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
```
Calculate and report the mean and median of the total number of steps taken per day
Mean
```{r echo=TRUE}
mean(stepsDay_totals$total_steps)
```
Median
```{r echo=TRUE}
median(stepsDay_totals$total_steps)
```
## What is the average daily activity pattern?
Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r echo=TRUE}
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("interval", "steps_mean")
plot(stepsInterval_mean, type = "l", main="The average number of steps")
```
Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r echo=TRUE}
max_interval <- which.max(stepsInterval_mean$steps_mean)
stepsInterval_mean$interval[max_interval]
```
## Imputing missing values
The total number of rows with missing values in the dataset
```{r echo=TRUE}
missing_values <- sum(is.na(df))
missing_values
```
Missing values will be replaced by mean for that day. If the mean is NA, missing values will be replaced by 0.
```{r echo=TRUE}
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=FALSE)
names(stepsDay_mean) <- c("date", "steps_mean")
#copy data frame df
imputed_df <- df
head(imputed_df)
```
Loop
```{r echo=TRUE}
#loop
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
if (is.na(stepsDay_mean$steps_mean[date])){
imputed_df$steps[i] <- 0
}
else {
imputed_df$steps[i] <- stepsDay_mean$steps_mean[date]
}
}
}
head(imputed_df)
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
New dataset needs to be aggregated by date
```{r echo=TRUE}
```
## Are there differences in activity patterns between weekdays and weekends?
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
Load the activity data
```{r echo=TRUE}
setwd("~/analysis/R_data/04_reproducible_research/RepData_PeerAssessment1")
df <- read.csv("./data_activity/activity.csv", header=TRUE);
#df <- na.omit(df);
tail(df, n=3);
df$date <- as.Date(df$date, "%Y-%m-%d")
```
## What is mean total number of steps taken per day?
Calculate the total number of steps taken per day
Make a histogram of the total number of steps taken each day
The total number of steps taken per day was calculated by using aggregate function.
```{r echo=TRUE}
stepsDay_totals <- aggregate(steps ~ date, data = df, FUN=sum, na.rm=TRUE)
names(stepsDay_totals) <- c("date", "total_steps")
#head(stepsDay_totals)
```
Histogram
```{r echo=TRUE}
hist(stepsDay_totals$total_steps, breaks=10, col="red", main="Histogram of total number of steps per day", xlab="Total number of steps in a day")
#library(ggplot2)
#qplot(date, data=stepsDay_totals, weight=total_steps, geom="histogram", binwidth=1, main="Histogram", ylab="total steps")
#density on y-axis
#4<-ggplot(stepsDay_totals, aes(x=date)) +
#  geom_histogram(aes(y = ..density..), color="black", fill=NA) + theme_bw()
#ggplot(stepsDay_totals, aes(date)) + geom_histogram(fill=NA, color="black") + theme_bw()   #nicer looking
#ggplot(data=stepsDay_totals, aes(x=date)) + geom_histogram()
```
Calculate and report the mean and median of the total number of steps taken per day
Mean
```{r echo=TRUE}
mean(stepsDay_totals$total_steps)
```
Median
```{r echo=TRUE}
median(stepsDay_totals$total_steps)
```
## What is the average daily activity pattern?
Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r echo=TRUE}
stepsInterval_mean <- aggregate(steps ~ interval, data = df, FUN=mean, na.rm=TRUE)
names(stepsInterval_mean) <- c("interval", "steps_mean")
plot(stepsInterval_mean, type = "l", main="The average number of steps")
```
Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r echo=TRUE}
max_interval <- which.max(stepsInterval_mean$steps_mean)
stepsInterval_mean$interval[max_interval]
```
## Imputing missing values
The total number of rows with missing values in the dataset
```{r echo=TRUE}
missing_values <- sum(is.na(df))
missing_values
```
Missing values will be replaced by mean for that day. If the mean is NA, missing values will be replaced by 0.
```{r echo=TRUE}
nas_vector <- is.na(df$steps)
stepsDay_mean <- aggregate(steps ~ date, data = df, FUN=mean, na.rm=FALSE)
names(stepsDay_mean) <- c("date", "steps_mean")
#copy data frame df
imputed_df <- df
head(imputed_df)
```
Loop
```{r echo=TRUE}
#loop
for (i in 1:nrow(imputed_df)){
if (nas_vector[i]==TRUE){
date <- imputed_df$date[i]
date <- as.Date(date, "%Y-%m-%d")
if (is.na(stepsDay_mean$steps_mean[date])){
imputed_df$steps[i] <- 0
}
else {
imputed_df$steps[i] <- stepsDay_mean$steps_mean[date]
}
}
}
head(imputed_df)
```
Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
New dataset needs to be aggregated by date
```{r echo=TRUE}
1
```
## Are there differences in activity patterns between weekdays and weekends?
install.packages("knitr")
